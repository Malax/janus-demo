#!/usr/bin/env bash

set -eu

layers_dir="$1"
env_dir="$2/env"
plan_path="$3"

if compgen -G "${env_dir}/*" > /dev/null; then
  for var in ${env_dir}/*; do
    declare "$(basename ${var})=$(<${var})"
  done
fi

echo ""
echo "[minecraft]"

# create a layer for minecraft
minecraft_layer=$layers_dir/minecraft
minecraft_version=${MINECRAFT_VERSION:-"1.16.4"}
minecraft_url=$(cat $CNB_BUILDPACK_DIR/files.json | jq -r .server.\"${minecraft_version}\".url)

if [ -z "$minecraft_url" ]; then
  echo "Could not find URL for Minecraft version $minecraft_version. Please check files.json."
  exit 1
fi

echo "Installing ${minecraft_version}"
curl -o minecraft.jar -s -L $minecraft_url

echo "Accepting EULA"
echo "eula=true" >> eula.txt

mkdir -p $minecraft_layer/bin
cp $CNB_BUILDPACK_DIR/sbin/minecraft $minecraft_layer/bin/minecraft
cp $CNB_BUILDPACK_DIR/sbin/minecraft-sync $minecraft_layer/bin/minecraft-sync
cp $CNB_BUILDPACK_DIR/public/index.rhtml .

chmod +x $minecraft_layer/bin/minecraft
chmod +x $minecraft_layer/bin/minecraft-sync

echo "launch = true" > ${minecraft_layer}.toml

cat <<EOF > ${layers_dir}/launch.toml
[[processes]]
type = "web"
command = "minecraft"
EOF

echo ""
echo "[ngrok]"

# create a layer for ngrok
ngrok_layer=$layers_dir/ngrok
mkdir -p $ngrok_layer
echo "Installing ngrok"
curl --silent -o ngrok.zip -L "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
unzip ngrok.zip -d $ngrok_layer/bin > /dev/null 2>&1
echo "launch = true" > ${ngrok_layer}.toml

echo ""
echo "[apt]"

# create a layer for apt
apt_layer=$layers_dir/apt
mkdir -p $apt_layer

APT_CACHE_DIR="$apt_layer/apt/cache"
APT_STATE_DIR="$apt_layer/apt/state"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

echo "Installing screen"
apt-get $APT_OPTIONS update -y
apt-get $APT_OPTIONS -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -d install --reinstall screen
mkdir -p $apt_layer/var/run/screen

mkdir -p $apt_layer/profile.d
cat <<EOF >$apt_layer/profile.d/000_apt.sh
export LD_LIBRARY_PATH="$apt_layer/usr/lib/x86_64-linux-gnu:$apt_layer/usr/lib/i386-linux-gnu:$apt_layer/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="$apt_layer/usr/lib/x86_64-linux-gnu:$apt_layer/usr/lib/i386-linux-gnu:$apt_layer/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="$apt_layer/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="$apt_layer/usr/lib/x86_64-linux-gnu/pkgconfig:$apt_layer/usr/lib/i386-linux-gnu/pkgconfig:$apt_layer/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export SCREENDIR="$apt_layer/var/run/screen"
EOF

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  dpkg -x $DEB $apt_layer/
done

mkdir -p $apt_layer/var/run/screen
chmod 0700 $apt_layer/var/run/screen

[ ! -d $apt_layer/bin ] && ln -s $apt_layer/usr/bin/ $apt_layer/bin
[ ! -d $apt_layer/lib ] && ln -s $apt_layer/usr/lib/ $apt_layer/lib

echo "launch = true" > ${apt_layer}.toml
echo "cache = true" >> ${apt_layer}.toml

exit 0